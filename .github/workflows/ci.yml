name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('services/fruxAI/api/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        cd services/fruxAI/api
        pip install -r requirements.txt

    - name: Install worker dependencies
      run: |
        cd services/fruxAI/worker
        pip install -r requirements.txt

    - name: Run linting
      run: |
        pip install flake8
        flake8 services/fruxAI/api/app/ services/fruxAI/worker/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 services/fruxAI/api/app/ services/fruxAI/worker/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Check code formatting
      run: |
        pip install black isort
        black --check --diff services/fruxAI/api/app/ services/fruxAI/worker/
        isort --check-only --diff services/fruxAI/api/app/ services/fruxAI/worker/

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: actions/docker-setup-buildx-action@v3

    - name: Build API Docker image
      uses: docker/build-push-action@v5
      with:
        context: services/fruxAI
        file: services/fruxAI/docker/Dockerfile.api
        push: false
        tags: fruxai-api:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build Worker Docker image
      uses: docker/build-push-action@v5
      with:
        context: services/fruxAI
        file: services/fruxAI/docker/Dockerfile.worker
        push: false
        tags: fruxai-worker:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  docs:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check documentation
      run: |
        # Check if README files exist
        [ -f README.md ] || exit 1
        [ -f services/fruxAI/README.md ] || exit 1
        [ -f frontend/README.md ] || exit 1

        # Check if all required sections are present in main README
        grep -q "## üöÄ Hƒ±zlƒ± Ba≈ülangƒ±√ß" README.md || exit 1
        grep -q "## üìÅ Proje Yapƒ±sƒ±" README.md || exit 1
        grep -q "## üîß Yapƒ±landƒ±rma" README.md || exit 1

  release:
    runs-on: ubuntu-latest
    needs: [test, build, security, docs]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate changelog
      run: |
        # This would typically use a changelog generator
        echo "Changelog would be generated here"

    - name: Create GitHub release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v0.1.0
        release_name: Release v0.1.0
        body: |
          ## What's New

          - Initial release of fruxAI
          - Backend API with FastAPI
          - Python crawler worker
          - Docker containerization
          - Comprehensive documentation

          ## Installation

          See README.md for installation instructions.
        draft: false
        prerelease: true
